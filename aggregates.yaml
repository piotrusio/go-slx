aggregates:
  - name: "sku"
    interval: 60
    get_query: |
      SELECT
        c.SYS_CHANGE_OPERATION as change_operation,
        c.SYS_CHANGE_VERSION as change_version,
        CONVERT(VARCHAR(32), HASHBYTES('MD5', CAST(c.Twr_GidNumer AS VARCHAR(40))), 2) AS aggregate_key,
        JSON_QUERY((
          SELECT
            c.Twr_GidNumer as sku_id
          FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
        )) AS payload
      FROM CHANGETABLE(CHANGES CDN.TwrKarty, @version) AS c
      WHERE c.SYS_CHANGE_OPERATION = 'D'

      UNION ALL

      SELECT
        c.SYS_CHANGE_OPERATION AS change_operation,
        c.SYS_CHANGE_VERSION as change_version,
        CONVERT(VARCHAR(32), HASHBYTES('MD5', CAST(c.Twr_GidNumer AS VARCHAR(40))), 2) AS aggregate_key,
        JSON_QUERY((
          SELECT
              c.Twr_GidNumer as sku_id,
              f.TGD_Kod as sku_group,
              e.TGD_Kod sku_subgroup,
              UPPER(t.twr_kod) as sku_code,
              UPPER(t.twr_nazwa) as sku_name,
              t.twr_ean as sku_ean_code,
              UPPER(t.twr_jm) as sku_unit_prefix,
              CASE t.twr_archiwalny WHEN 0 THEN 'AKTYWNY' ELSE 'NIEAKTYWNY' END AS sku_status
          FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
        )) AS payload
      FROM CHANGETABLE(CHANGES CDN.TwrKarty, @version) AS c
          JOIN CDN.TwrKarty t ON c.Twr_GIDNumer = t.Twr_GIDNumer
          JOIN CDN.TwrGrupyDom d ON t.Twr_GIDNumer = d.TGD_GIDNumer and t.Twr_GIDTyp = d.TGD_GIDTyp
          JOIN CDN.TwrGrupyDom e ON d.TGD_GrONumer = e.TGD_GIDNumer and d.TGD_GrOTyp = e.TGD_GIDTyp
          JOIN CDN.TwrGrupyDom f ON e.TGD_GrONumer = f.TGD_GIDNumer and e.TGD_GrOTyp = f.TGD_GIDTyp
      WHERE 1=1
          AND f.TGD_GrOTyp = -16
          AND f.TGD_GrONumer = 2

  - name: "customer"
    interval: 60
    get_query: |
      WITH changetracking_changes AS (
        SELECT
          c.SYS_CHANGE_OPERATION as change_operation,
          c.SYS_CHANGE_VERSION as change_version,
          c.Knt_GidNumer as customer_id
        FROM CHANGETABLE(CHANGES CDN.KntKarty, @version) AS c
        UNION
        SELECT
          c.SYS_CHANGE_OPERATION,
          c.SYS_CHANGE_VERSION,
          a.KnA_KntNumer
        FROM CHANGETABLE(CHANGES CDN.KntAdresy, @version) AS c
          JOIN CDN.KntAdresy a ON c.KnA_GidNumer = a.KnA_GIDNumer
        UNION
        SELECT
          c.SYS_CHANGE_OPERATION,
          c.SYS_CHANGE_VERSION,
          c.KnS_KntNumer
        FROM CHANGETABLE(CHANGES CDN.KntOsoby, @version) AS c
      ), customers AS (
        SELECT
          customer_id,
          MAX(change_version) as change_version,
          MAX(change_operation) as change_operation
        FROM
          changetracking_changes
        GROUP BY
          customer_id
      )
      -- delete operations does not have aggregate_data
      SELECT
        c.change_operation,
        c.change_version,
        CONVERT(VARCHAR(32), HASHBYTES('MD5', CAST(c.customer_id AS VARCHAR(40))), 2) AS aggregate_key,
        JSON_QUERY((
          SELECT
            c.customer_id
          FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
        )) AS payload
      FROM customers AS c
      WHERE c.change_operation = 'D'

      UNION ALL

      SELECT
        c.change_operation,
        c.change_version,
        CONVERT(VARCHAR(32), HASHBYTES('MD5', CAST(c.customer_id AS VARCHAR(40))), 2) AS aggregate_key,
        JSON_QUERY((
          SELECT
            c.customer_id,
            k.knt_akronim as customer_code,
            e.KGD_Kod as customer_group,
            UPPER(COALESCE(NULLIF(TRIM(CONCAT_WS(' ', p.prc_imie1, p.prc_nazwisko)), ''), 'N/D')) AS customer_owner,        
            UPPER(TRIM(CONCAT_WS(' ', k.knt_nazwa1, k.knt_nazwa2, k.knt_nazwa3))) AS customer_name,
            k.knt_nipprefiks as customer_tax_prefix,
            COALESCE(k.knt_nipe, k.knt_nip) AS customer_tax_id,
            TRIM(SUBSTRING(n.naz_nazwa,1,10)) AS customer_price_list,
            CASE k.knt_archiwalny WHEN 0 THEN 'AKTYWNY' ELSE 'NIEAKTYWNY' END AS customer_status,
            JSON_QUERY((
              SELECT
                a.kna_akronim as adress_code,
                CASE
                  WHEN k.knt_knanumer = a.KnA_GIDNumer THEN 'AKTUALNY'
                  WHEN a.kna_wysylkowy = 1 THEN 'WYSYŁKOWY'
                  ELSE 'INNY'
                END AS address_type,
                UPPER(a.kna_ulica) as adress_street,
                UPPER(a.kna_kraj) as adress_country,
                UPPER(a.kna_kodp) as adress_zip,
                UPPER(a.kna_miasto) as adress_city,
                UPPER(a.kna_wojewodztwo) as adress_district,
                a.kna_telefon1 as adress_phone1,
                a.kna_telefon2 as adress_phone2,
                a.kna_fax as adress_fax,
                a.kna_modem as adress_mode,
                a.kna_telex as adress_gsm,
                a.kna_email as adress_email
              FROM CDN.KntAdresy a
              WHERE a.KnA_KntNumer = k.Knt_GIDNumer AND a.kna_dataarc = 0
              FOR JSON PATH
            )) AS adresses,
            JSON_QUERY((
              SELECT
                o.kns_kntlp as id,
                o.kns_nazwa as name,
                o.kns_stanowisko as position,
                o.kns_email as email,
                o.kns_telefon as phone,
                o.kns_telefonk as mobile
              FROM CDN.KntOsoby o
              WHERE k.Knt_GIDNumer = o.KnS_KntNumer AND o.kns_archiwalny = 0
              FOR JSON PATH
            )) AS contacts,
            JSON_QUERY((
              SELECT
                o.klk_id as credit_id,
                DATEADD(DAY, o.klk_dataod, '1800-12-28') as valid_from,
                DATEADD(DAY, o.klk_datado, '1800-12-28') as valid_to,
                o.klk_maxlimitwart as credit_value,
                o.klk_waluta as credit_currency
              FROM CDN.KntLimityK o
              WHERE k.Knt_GIDNumer = o.Klk_KntNumer
                AND o.klk_datado > DATEDIFF(DAY, '1800-12-28', GETDATE())
              FOR JSON PATH
            )) AS credits
          FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
        )) AS payload
      FROM customers AS c
        JOIN CDN.KntKarty AS k ON c.customer_id = k.knt_gidnumer
        JOIN CDN.KntGrupyDom d ON k.knt_gidnumer = d.kgd_gidnumer AND d.kgd_gidtyp = k.knt_gidtyp
        JOIN CDN.KntGrupyDom e ON d.kgd_grotyp = e.kgd_gidtyp AND d.kgd_gronumer = e.kgd_gidnumer
        LEFT JOIN CDN.KntOpiekun o ON k.knt_gidnumer = o.kto_kntnumer AND k.knt_gidtyp = o.kto_knttyp
        LEFT JOIN CDN.PrcKarty p ON o.kto_prcnumer = p.prc_gidnumer
        LEFT JOIN CDN.Nazwy n ON k.knt_cena = n.naz_gidlp AND n.naz_gidtyp = 64

  - name: "stock"
    interval: 60
    get_query: |
      SELECT
        'U' as change_operation,
        @version + 1 as change_version,
        CONVERT(VARCHAR(32), HASHBYTES('MD5', CAST(t.Twr_GidNumer AS VARCHAR(40))), 2) AS aggregate_key,
        JSON_QUERY((
          SELECT
            t.twr_gidnumer as sku_id,
            t.Twr_Kod sku_code,
            JSON_QUERY((
                SELECT
                    x.Dst_Cecha as batch_number,
                    m.MAG_Kod warhouse_code,
                    m.MAG_Nazwa warehouse_name,
                    z.TwZ_IlSpr stock_qty
                FROM CDN.TwrZasoby z
                    JOIN CDN.Dostawy x ON x.Dst_GidNumer = z.TwZ_DstNumer AND x.Dst_GidTyp = z.TwZ_DstTyp
                    JOIN CDN.Magazyny m ON z.TwZ_MagNumer = m.MAG_GIDNumer
                WHERE z.TwZ_TwrNumer = t.Twr_GIDNumer
                    AND z.TwZ_MagNumer IN (1, 14, 19, 23, 29, 30, 35, 70, 81, 83, 87, 88)
                FOR JSON PATH
            )) AS sku_stock
          FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
        )) AS payload 
      FROM CDN.TwrKarty t
          JOIN CDN.TwrGrupyDom d ON t.Twr_GIDNumer = d.TGD_GIDNumer and t.Twr_GIDTyp = d.TGD_GIDTyp
          JOIN CDN.TwrGrupyDom e ON d.TGD_GrONumer = e.TGD_GIDNumer and d.TGD_GrOTyp = e.TGD_GIDTyp
          JOIN CDN.TwrGrupyDom f ON e.TGD_GrONumer = f.TGD_GIDNumer and e.TGD_GrOTyp = f.TGD_GIDTyp
      WHERE 1=1
          AND f.TGD_GrOTyp = -16
          AND f.TGD_GrONumer = 2
          AND t.Twr_Archiwalny = 0

  - name: "pricelist"
    interval: 60
    get_query: |
      SELECT
          a.SYS_CHANGE_OPERATION AS change_operation,
          a.SYS_CHANGE_VERSION as change_version,
          CONVERT(VARCHAR(32), HASHBYTES('MD5', CAST(c.TwC_TwrNumer AS VARCHAR(40))), 2) AS aggregate_key,
          JSON_QUERY((
              SELECT
                  c.twc_tcnid as pricelist_id,
                  c.twc_id as price_id,
                  t.Twr_GIDNumer as sku_id,
                  t.TwR_Kod as sku_code,
                  SUBSTRING(x.naz_nazwa,1,10) as pricelist_name,
                  c.twc_waluta as price_currency,
                  c.twc_wartosc as price_value,
                  SUBSTRING(x.naz_nazwa,11,1) AS price_type
              FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
          )) AS payload
      FROM CHANGETABLE(CHANGES CDN.TwrCeny, @version) AS a
          JOIN CDN.TwrCeny c ON a.TwC_ID = c.TwC_ID
          JOIN CDN.TwrCenyNag n ON c.TwC_TcNId = n.TCN_Id
          JOIN CDN.TwrKarty t ON c.TwC_TwrNumer = t.Twr_GIDNumer
          JOIN CDN.Nazwy x ON n.TCN_RodzajCeny = x.Naz_GIDLp AND x.Naz_GIDTyp = 64
          JOIN CDN.TwrGrupyDom d ON t.Twr_GIDNumer = d.TGD_GIDNumer and t.Twr_GIDTyp = d.TGD_GIDTyp
          JOIN CDN.TwrGrupyDom e ON d.TGD_GrONumer = e.TGD_GIDNumer and d.TGD_GrOTyp = e.TGD_GIDTyp
          JOIN CDN.TwrGrupyDom f ON e.TGD_GrONumer = f.TGD_GIDNumer and e.TGD_GrOTyp = f.TGD_GIDTyp
      WHERE 1=1
          AND n.tcn_stan = 5
          AND f.TGD_GrOTyp = -16
          AND f.TGD_GrONumer = 2
          AND t.Twr_Archiwalny = 0